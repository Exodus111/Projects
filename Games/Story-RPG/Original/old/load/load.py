import os, sys, pygame
from pygame.locals import *


class Template():
    def __init__(self, size=(640, 480)):
        self.size = size
        os.environ["SDL_VIDEO_CENTERED"] = "1"
        pygame.init()
        pygame.mouse.set_visible(True)
        self.clock = pygame.time.Clock()
        self.screen = pygame.display.set_mode(self.size)
        self.game_on = True
        self.dt = 0.

    def mainloop(self, fps=60):
        while self.game_on:
            pygame.display.set_caption("FPS: {}".format(int(self.clock.get_fps())))
            self.clock.tick(fps)
            self.dt += float(self.clock.get_rawtime())/1000
            self.events()
            self.update(self.dt)
            self.draw()
            pygame.display.flip()
        self.end_game()

    def events(self):
        for event in pygame.event.get():
            if event.type == QUIT:
                self.game_on = False
            elif event.type == KEYDOWN:
                self.key_down(event.key)
            elif event.type == KEYUP:
                self.key_up(event.key)
            elif event.type == MOUSEBUTTONDOWN:
                self.mouse_down(event.button, event.pos)
            elif event.type == MOUSEBUTTONUP:
                self.mouse_up(event.button, event.pos)
            elif event.type == MOUSEMOTION:
                self.mouse_motion(event.buttons, event.pos, event.rel)

    def update(self, dt):
        pass

    def draw(self):
        pass

    def key_down(self, key):
        pass

    def key_up(self, key):
        pass

    def mouse_down(self, button, pos):
        pass

    def mouse_up(self, button, pos):
        pass

    def mouse_motion(self, button, pos, rel):
        pass

    def end_game(self):
        pygame.quit()
        print("Thank you for playing.")
        print("Time played: {}".format(self.dt))

class Tile(pygame.sprite.DirtySprite):
    def __init__(self, image=None):
        if image != None:
            self.image = image
            self.rect = self.image.get_rect()

class Animate(object):
    def __init__(self, name):
        """
        A class that handles the character animations.

            name:
             This is merely a tag to tell the animation objects apart.
        """

        self.new = True
        self.name = name
        self.anim_type = "walk"
        self.direction = "down"
        self.mytimers = {}
        self.speed = .05
        self.frame = None
        self.poses = {}

    def load_animations(self, atype, order, images):
        """
        Loads one pose/move with the corresponding animations.

            atype:
             A string with the name of the pose to be loaded.

            order:
             A list of strings with the on-screen directions for the pose.

            images:
             A list of pygame images that correspond to the animation.
              This list is generated by the SpriteSheet class.
        """
        self.poses[atype] = {}
        for i, direction in enumerate(order):
            self.poses[atype][direction] = images[i]

    def switch(self, atype, direction=None):
        """
        Switches type and potentially direction of the characters animation.
         Ex: From idle to walking or from left to right.

             atype:
              The type of animation to switch to. (walking, idle etc..)

             direction:
              The on_screen direction to switch to. (left, right, up, down)
        """
        self.anim_type = atype
        if direction != None:
            self.direction = direction

    def new_pose(self, name, images):
        """
        Method for adding new poses.

            name:
             A string with the name of the new pose or action.

            images:
             A list of pygame images that corresponds to the new pose.
        """
        self.poses[name] = {"up":images[0],"left":images[1],"down":images[2],"right":images[3]}

    def _draw_frame(self):
        while True:
            for frame in self.poses[self.anim_type][self.direction]:
                yield frame

    def update(self, dt):
        """
        This method needs to be called after a switch to update the
         frame. It returns a new frame to be draw.

            dt:
             Delta Time variable generated by Pygame.
        """
        if self.new:
            self.draw = self._draw_frame()
            self.new = False
        if myfuncs.mytimer(self.name, self.speed, dt):
            self.frame = self.draw.next()
        return self.frame


class SpriteSheet(object):
    def __init__(self, filename, block, start, size):
        """
        Returns a list of images from an image file containing a spritesheet.

            filename:
             A string with the name of the spritesheet file and the relative path to it.

            block:
             A single integer containing the size of the "blocks" to divide the file into.
             The blocks must be squares, so 32x32 = 32.

            start:
             A tuple with 2 numbers, that is the start X,Y coordinates for where to begin chopping.

            size:
             A tuple with 2 numbers, that denotes how many "blocks" you want to chop
              from the starting position.
        """
        self.sheet = pygame.image.load(filename).convert_alpha()
        x_b, y_b = size
        rects = []
        for y in xrange(y_b):
            line_rects = []
            for x in xrange(x_b):
                rect = pygame.Rect(start[0]+(x*block), start[1]+(y*block), block, block)
                line_rects.append(rect)
            rects.append(line_rects)
        self.image_list = [self.load_images(rectlist) for rectlist in rects]

    def image_at(self, rect):
        image = pygame.Surface(rect.size)
        trans = image.get_at((1,1))
        image.set_colorkey(trans)
        image.blit(self.sheet, (0,0), rect)
        return image


    def load_images(self, rects):
        return [self.image_at(rect) for rect in rects]
